#!/bin/bash

# preprocedure
session_update="required"

# load small-shell params
. ../descriptor/.small_shell_path
IP_whitelisting=%%IP_whitelisting
auth=required

# IP restriction check
if [ "$IP_whitelisting" = "yes" ];then
  whitelist_chk=`${small_shell_path}/bin/meta get.IP | grep -v "NO IP RESTRICTION"`
  if [ "$whitelist_chk" ];then
    for IP in $whitelist_chk
    do
      IP=`echo $IP | sed "s/*//g"`
      if [[ ${REMOTE_ADDR} == ${IP}* ]];then
        IP_chk_flag=yes
        break
      fi
    done
   
    if [ ! "$IP_chk_flag" = "yes" ];then
      echo "error: your IP is not allowed to access"
      exit 1
    fi
  fi
fi

param=`date +%s`
param="$param:$RANDOM"
count=1
while [ -f ../tmp/${param} ]
do
 sleep 0.01
 count=`expr $count + 1`
 if [ $count -eq 100 ];then
   echo "error: please contact to adimin"
   exit 1
 fi
done

# parse QUERY_STRING
echo $QUERY_STRING | php -r "echo urldecode(file_get_contents('php://stdin'));" | tr -d \$ | tr -d \` | sed "s/\&/\n/g" > ../tmp/${param}
cat ../tmp/${param} | sed -e "s/=/=\"/1" | sed "s/$/\"/g" | sed "s/^\"//g" > ../tmp/${param}.load
chmod 755 ../tmp/${param}.load

# load query string
.  ../tmp/${param}.load
rm  ../tmp/${param}*

if [ ! "$req" ];then
  req=main
fi

if [ "$subapp" ];then
  if [ ! "$req" = "main" -a ! "$req" = "logout" ];then
    req="${subapp}.$req"
  fi
fi

# define contents type except statistics file or graph
if [[ ! "$req" == *stats && ! "$req" == *file ]];then
  echo "Content-Type: text/html"
  echo ""
fi

# Session verification

if [ "$auth" = "required" ];then

  if [[ "$req" == *log_viewer || "$req" == *csv || "$req" == *hash || "$req" == *stats || "$req" == *file ]];then
    session_update=no

    # session check
    session_chk=`sudo -u small-shell ${small_shell_path}/bin/extension_auth app:team session_chk:${session} pin:${pin} remote_addr:${REMOTE_ADDR}`
    session_ip=`echo $session_chk | awk -F ":" '{print $2}'`

    if [ ! "${session_ip}" = ${REMOTE_ADDR} ];then
      if [[ ! "$req" == *stats && ! "$req" == *file ]];then
        echo "Content-Type: text/html"
        echo ""
      fi
      echo "<meta http-equiv=\"refresh\" content=\"0; url=./auth.team?req=$req&message=!%20Session%20ExpiredDDD\">"
      exit 1
    fi
  fi

  if [ "$req" = "logout" ]; then
    sudo -u small-shell ${small_shell_path}/bin/extension_auth app:team pin:${pin} remote_addr:${REMOTE_ADDR} logout:${session}
    echo "<meta http-equiv=\"refresh\" content=\"0; url=./auth.team?&req=main\">"
    exit 0
  fi

  # session update
  if [ "$session_update" = "required" ];then
    get_session=`sudo -u small-shell ${small_shell_path}/bin/extension_auth session_persist:${session} \
    pin:${pin} remote_addr:${REMOTE_ADDR} app:team`

    user_name=`echo $get_session | awk -F "," '{print $1}' | awk -F ":" '{print $2}'`
    session=`echo $get_session | awk -F "," '{print $2}' | awk -F ":" '{print $2}'`
    pin=`echo $get_session | awk -F "," '{print $3}' | awk -F ":" '{print $2}'`

    if [ ! "$user_name" -o ! "$session" -o ! "${pin}" ];then
      if [[ $req == *table ]];then
        echo "<meta http-equiv=\"refresh\" content=\"0; url=./auth.team?req=$req&page=$page&message=!%20Session%20Expired\">"
        exit 1
      elif [[ $req == *get ]];then
        echo "<meta http-equiv=\"refresh\" content=\"0; url=./auth.team?req=$req&databox=$databox&id=$id&message=!%20Session%20Expired\">"
        exit 1
      else
        req=main
        echo "<meta http-equiv=\"refresh\" content=\"0; url=./auth.team?req=$req&message=!%20Session%20Expired\">"
        exit 1
      fi
    fi
  fi

else
  # else means not use authentication method but use system key for databox connection
  authkey=""
  auth_req=`sudo -u small-shell ${small_shell_path}/bin/extension_auth key_auth:${authkey} remote_addr:${REMOTE_ADDR} app:team`
  user_name=`echo $auth_req | awk -F "," '{print $1}' | awk -F ":" '{print $2}'`
  session=`echo $auth_req | awk -F "," '{print $2}' | awk -F ":" '{print $2}'`
  pin=`echo $auth_req | awk -F "," '{print $3}' | awk -F ":" '{print $2}'`
fi


# parse POST data
if [ "`echo $REQUEST_METHOD | grep -i "POST"`" ];then

  if [ "`echo $CONTENT_TYPE | grep "application/json"`" ];then
    method=json
  elif [ "`echo $CONTENT_TYPE | grep "multipart/form-data"`" ];then
    method=multipart
  elif [ "`echo $CONTENT_TYPE | grep "application/octet-stream"`" ];then
    method=data-binary
  else
    method=urlenc
  fi

  mkdir ../tmp/$session
  # dump posted data
  dd bs=${CONTENT_LENGTH} of=../tmp/$session/input 2>/dev/null
  ../bin/parse.sh $session $method

fi

#----------------------------
# routing to action scripts
#----------------------------

case "$req" in
  
  "main")
    ../bin/team_main.sh session:$session pin:$pin user_name:$user_name remote_addr:${REMOTE_ADDR};;

  "get")
    ../bin/team_get.sh session:$session pin:$pin user_name:$user_name databox:$databox id:$id ;;

  "set")
    ../bin/team_set.sh session:$session pin:$pin user_name:$user_name databox:$databox id:$id ;;

  "table")
    ../bin/team_table.sh session:$session pin:$pin user_name:$user_name id:$id page:$page table_command:$table_command;;

  "log_viewer")
    ../bin/team_log_viewer.sh databox:$databox session:$session pin:$pin id:$id ;;

  "file")
    ../bin/team_dl.sh session:$session pin:$pin id:$id databox:$databox ;;

  # bookmark
  "bookmarks.table") ../bin/bookmarks_table.sh session:$session pin:$pin user_name:$user_name page:$page table_command:$table_command;;
  "bookmarks.get") ../bin/bookmarks_get.sh session:$session pin:$pin user_name:$user_name id:$id ;;
  "bookmarks.set") ../bin/bookmarks_set.sh session:$session pin:$pin user_name:$user_name id:$id ;;
  "bookmarks.log_viewer") ../bin/bookmarks_log_viewer.sh session:$session pin:$pin id:$id ;;
 
  # drive
  "drive.table") ../bin/drive_table.sh session:$session pin:$pin user_name:$user_name page:$page table_command:$table_command;;
  "drive.get") ../bin/drive_get.sh session:$session pin:$pin user_name:$user_name id:$id ;;
  "drive.set") ../bin/drive_set.sh session:$session pin:$pin user_name:$user_name id:$id ;;
  "drive.log_viewer") ../bin/drive_log_viewer.sh session:$session pin:$pin id:$id ;;
  "drive.file") ../bin/drive_dl.sh session:$session pin:$pin id:$id ;;

  # tasks
  "tasks.table") ../bin/tasks_table.sh session:$session pin:$pin user_name:$user_name page:$page table_command:$table_command;;
  "tasks.get") ../bin/tasks_get.sh session:$session pin:$pin user_name:$user_name id:$id ;;
  "tasks.set") ../bin/tasks_set.sh session:$session pin:$pin user_name:$user_name id:$id ;;
  "tasks.log_viewer") ../bin/tasks_log_viewer.sh session:$session pin:$pin id:$id ;;
  "tasks.file") ../bin/tasks_dl.sh session:$session pin:$pin id:$id ;;
  
  # inquiries
  "inquiries.table") ../bin/inquiries_table.sh session:$session pin:$pin user_name:$user_name page:$page table_command:$table_command;;
  "inquiries.get") ../bin/inquiries_get.sh session:$session pin:$pin user_name:$user_name id:$id ;;
  "inquiries.set") ../bin/inquiries_set.sh session:$session pin:$pin user_name:$user_name id:$id ;;
  "inquiries.log_viewer") ../bin/inquiries_log_viewer.sh session:$session pin:$pin id:$id ;;
  "inquiries.file") ../bin/inquiries_dl.sh session:$session pin:$pin id:$id ;;


  *)
    echo "error: wrong request";;

esac

exit 0
